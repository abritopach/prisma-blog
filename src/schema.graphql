# import Post from "./generated/prisma.graphql"

# Custom directives.

directive @isAuthenticated on QUERY | FIELD | MUTATION
directive @hasRole(roles: [String]) on QUERY | FIELD | MUTATION
directive @isOwner(type: String) on QUERY | MUTATION
directive @isOwnerOrHasRole(type: String, roles: [String]) on QUERY | MUTATION

type Query {
  # Post queries.
  feed: [Post!]!
  drafts: [Post!]!
  post(id: ID!): Post @isOwnerOrHasRole(type: "Post", roles: ["ADMIN"])
  allPosts(filter: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]!

  # User queries.
  allUsers(filter: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]! @hasRole(roles: ["ADMIN"])
  me: User @isAuthenticated

  # Category queries.
  category(id: ID!): Category @isOwnerOrHasRole(type: "Post", roles: ["ADMIN"])
  allCategories(filter: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]! @isAuthenticated
}

type Mutation {

  # User mutations.
  signup(email: String!, password: String!, name: String!, username: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  updateUser(avatar: String, resetExpires: DateTime, resetToken: String, role: String, toDelete: Boolean): User @isOwnerOrHasRole(type: "User", roles: ["ADMIN", "USER"])
  deleteUser(id: ID!): User! @hasRole(roles: ["ADMIN"])

  # Post mutations.
  createDraft(title: String!, text: String!, content: String!): Post!
  publish(id: ID!): Post!
  deletePost(id: ID!): Post! @isOwnerOrHasRole(type: "Post", roles: ["ADMIN", "USER"])

  # Category mutations.
  createCategory(name: String!, posts: [ID!]): Category @hasRole(roles: ["ADMIN"])
  deleteCategory(id: ID!): Category! @hasRole(roles: ["ADMIN"])
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  username: String!
  posts: [Post!]!
  role: String!
  avatar: String
  resetExpires: DateTime
  resetToken: String
  toDelete: Boolean
}
