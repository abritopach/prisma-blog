# import Post from "./generated/prisma.graphql"

directive @hasRole(roles: [String]) on QUERY | FIELD | MUTATION

type Query {
  # Post queries.
  feed: [Post!]!
  drafts: [Post!]!
  post(id: ID!): Post
  allPosts(filter: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]!

  # User queries.
  allUsers(filter: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]!
  me: User

  # Category queries.
  allCategories(filter: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]!
}

type Mutation {

  # User mutations.
  signup(email: String!, password: String!, name: String!, username: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  deleteUser(id: ID!): User! @hasRole(roles: ["admin"])

  # Post mutations.
  createDraft(title: String!, text: String!, content: String!): Post!
  publish(id: ID!): Post!
  deletePost(id: ID!): Post!

  # Category mutations.
  createCategory(name: String!, posts: [ID!]): Category
  deleteCategory(id: ID!): Category!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  username: String!
  posts: [Post!]!
  role: String!
  avatar: String
}
